# frozen_string_literal: true

module ImageGeneration
  class ProfileCardGenerator < BaseGenerator
    def generate(person)
      begin
        create_profile_card(person)
        filename = "profile_#{person.id}.jpg"
        file_path = save_to_file(filename)
        
        # Store in database
        ShareImage.create!(
          person: person,
          image_type: 'profile',
          file_path: file_path,
          expires_at: 7.days.from_now,
          generation_time_ms: generation_time,
          file_size: File.size(Rails.root.join('public', file_path))
        )
        
        file_path
      ensure
        cleanup
      end
    end
    
    private
    
    def create_profile_card(person)
      @person = person
    end
    
    def svg_content
      <<~CONTENT
        <!-- Profile Header -->
        <text x="120" y="140" font-family="Arial, sans-serif" font-size="32" font-weight="bold" fill="#{COLORS[:text_primary]}">
          #{escape_xml(@person.full_name)}
        </text>
        
        <!-- Life Dates -->
        #{life_dates_svg}
        
        <!-- Two Column Layout -->
        <g id="two-column-content">
          <!-- Left Column: Facts -->
          #{facts_svg}
          
          <!-- Right Column: Timeline -->
          #{timeline_column_svg}
        </g>
        
        <!-- Footer -->
        <text x="120" y="580" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_secondary]}">
          Generated by ChronicleTree • #{Date.current.strftime("%B %Y")}
        </text>
      CONTENT
    end
    
    private
    
    def life_dates_svg
      y_pos = 180
      content = ""
      
      if @person.date_of_birth
        birth_year = @person.date_of_birth.year
        content += %{<text x="120" y="#{y_pos}" font-family="Arial, sans-serif" font-size="18" fill="#{COLORS[:text_secondary]}">Born #{birth_year}</text>}
        y_pos += 25
        
        unless @person.date_of_death
          age = Date.current.year - birth_year
          content += %{<text x="120" y="#{y_pos}" font-family="Arial, sans-serif" font-size="16" fill="#{COLORS[:text_secondary]}">Age #{age}</text>}
          y_pos += 25
        end
      end
      
      if @person.date_of_death
        death_year = @person.date_of_death.year
        content += %{<text x="120" y="#{y_pos}" font-family="Arial, sans-serif" font-size="18" fill="#{COLORS[:text_secondary]}">Died #{death_year}</text>}
      end
      
      content
    end
    
    def relationships_svg
      y_pos = 280
      left_column_x = 120
      content = %{<text x="#{left_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#{COLORS[:primary]}">Family Connections</text>}
      y_pos += 40
      
      # Parents
      parents = @person.parents
      if parents.any?
        content += %{<text x="#{left_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="16" fill="#{COLORS[:text_primary]}">Parents: #{parents.map(&:full_name).join(', ')}</text>}
        y_pos += 25
      end
      
      # Current spouses
      spouses = @person.current_spouses
      if spouses.any?
        content += %{<text x="#{left_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="16" fill="#{COLORS[:text_primary]}">Spouse: #{spouses.map(&:full_name).join(', ')}</text>}
        y_pos += 25
      end
      
      # Children
      children = @person.children
      if children.any?
        children_text = children.count > 3 ? "#{children.limit(3).map(&:full_name).join(', ')} and #{children.count - 3} more" : children.map(&:full_name).join(', ')
        content += %{<text x="#{left_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="16" fill="#{COLORS[:text_primary]}">Children: #{children_text}</text>}
        y_pos += 25
      end
      
      # Siblings
      siblings = @person.siblings
      if siblings.any?
        siblings_text = siblings.count > 2 ? "#{siblings.limit(2).map(&:full_name).join(', ')} and #{siblings.count - 2} more" : siblings.map(&:full_name).join(', ')
        content += %{<text x="#{left_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="16" fill="#{COLORS[:text_primary]}">Siblings: #{siblings_text}</text>}
        y_pos += 25
      end
      
      # Add timeline section to left column
      if y_pos < 450  # Only add if we have space
        content += timeline_svg(y_pos + 20, left_column_x)
      end
      
      content
    end
    
    def timeline_svg(start_y, x_pos = 120)
      timeline_content = ""
      y_pos = start_y
      
      # Timeline header
      timeline_content += %{<text x="#{x_pos}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#{COLORS[:primary]}">Timeline</text>}
      y_pos += 30
      
      # Get timeline events
      timeline_events = get_timeline_events
      
      if timeline_events.any?
        timeline_events.take(4).each do |event|  # Limit to 4 events for space
          # Timeline bullet point
          timeline_content += %{<circle cx="#{x_pos + 10}" cy="#{y_pos - 5}" r="2" fill="#{COLORS[:accent]}"/>}
          
          # Timeline event (truncate long events)
          event_text = event.length > 35 ? "#{event[0..32]}..." : event
          timeline_content += %{<text x="#{x_pos + 20}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="12" fill="#{COLORS[:text_primary]}">#{escape_xml(event_text)}</text>}
          y_pos += 18
        end
      else
        # Show message if no timeline data available
        timeline_content += %{<text x="#{x_pos + 20}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="12" fill="#{COLORS[:text_secondary]}" font-style="italic">No events recorded</text>}
      end
      
      timeline_content
    end
    
    def facts_svg
      left_column_x = 120  # Left side of the canvas
      y_pos = 280
      content = ""
      
      # Facts header
      content += %{<text x="#{left_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#{COLORS[:primary]}">Key Facts</text>}
      y_pos += 40
      
      # Get facts from database
      facts = @person.facts.order(:date).limit(8)  # Show up to 8 facts
      
      if facts.any?
        facts.each do |fact|
          # Format fact text
          if fact.label.present? && fact.value.present?
            fact_text = "#{fact.label}: #{fact.value}"
          elsif fact.label.present?
            fact_text = fact.label
          elsif fact.value.present?
            fact_text = fact.value
          else
            next # Skip empty facts
          end
          
          # Increase limit for facts - no truncation for better sharing
          fact_text = fact_text.length > 80 ? "#{fact_text[0..77]}..." : fact_text
          
          # Add bullet point
          content += %{<circle cx="#{left_column_x + 5}" cy="#{y_pos - 5}" r="2" fill="#{COLORS[:accent]}"/>}
          
          # Add fact text
          content += %{<text x="#{left_column_x + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_primary]}">#{escape_xml(fact_text)}</text>}
          y_pos += 22
          
          # Add date/location if available
          if fact.date || fact.location
            detail_parts = []
            detail_parts << fact.date.year.to_s if fact.date
            detail_parts << fact.location if fact.location.present?
            detail_text = detail_parts.join(', ')
            
            content += %{<text x="#{left_column_x + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="12" fill="#{COLORS[:text_secondary]}">#{escape_xml(detail_text)}</text>}
            y_pos += 18
          end
          
          y_pos += 5  # Extra spacing between facts
          
          # Stop if we're getting close to bottom
          break if y_pos > 480
        end
      else
        content += %{<text x="#{left_column_x + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_secondary]}" font-style="italic">No facts recorded</text>}
      end
      
      content
    end
    
    def timeline_column_svg
      right_column_x = 620  # Right side of the canvas
      y_pos = 280
      content = ""
      
      # Add relationships section first
      relationships_result = relationships_column_svg(right_column_x, y_pos)
      content += relationships_result[:content]
      y_pos = relationships_result[:next_y_pos] + 20  # Add spacing between sections
      
      # Timeline header
      content += %{<text x="#{right_column_x}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#{COLORS[:primary]}">Life Timeline</text>}
      y_pos += 40
      
      # Get timeline events
      timeline_events = get_timeline_events
      
      if timeline_events.any?
        timeline_events.take(4).each do |event|  # Show up to 4 timeline events (reduced to make room for relationships)
          # Timeline bullet point
          content += %{<circle cx="#{right_column_x + 5}" cy="#{y_pos - 5}" r="2" fill="#{COLORS[:accent]}"/>}
          
          # Timeline event (increase limit for better sharing content)
          event_text = event.length > 70 ? "#{event[0..67]}..." : event
          content += %{<text x="#{right_column_x + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_primary]}">#{escape_xml(event_text)}</text>}
          y_pos += 20
        end
      else
        # Show message if no timeline data available
        content += %{<text x="#{right_column_x + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_secondary]}" font-style="italic">No timeline events recorded</text>}
      end
      
      content
    end
    
    def relationships_column_svg(x_pos, start_y)
      y_pos = start_y
      content = ""
      
      # Relationships header
      content += %{<text x="#{x_pos}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#{COLORS[:primary]}">Family Relationships</text>}
      y_pos += 40
      
      # Get family relationships
      relationships = get_family_relationships
      
      if relationships.any?
        relationships.take(5).each do |relationship|  # Limit to 5 relationships to save space
          # Relationship bullet point
          content += %{<circle cx="#{x_pos + 5}" cy="#{y_pos - 5}" r="2" fill="#{COLORS[:accent]}"/>}
          
          # Relationship text
          rel_text = relationship.length > 50 ? "#{relationship[0..47]}..." : relationship
          content += %{<text x="#{x_pos + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_primary]}">#{escape_xml(rel_text)}</text>}
          y_pos += 22
        end
      else
        # Show message if no relationships available
        content += %{<text x="#{x_pos + 15}" y="#{y_pos}" font-family="Arial, sans-serif" font-size="14" fill="#{COLORS[:text_secondary]}" font-style="italic">No relationships recorded</text>}
        y_pos += 22
      end
      
      { content: content, next_y_pos: y_pos }
    end
    
    def get_family_relationships
      relationships = []
      
      # Parents
      parents = @person.parents
      if parents.any?
        parent_names = parents.map(&:full_name).join(', ')
        parent_label = parents.count == 1 ? 'Parent' : 'Parents'
        relationships << "#{parent_label}: #{parent_names}"
      end
      
      # Current spouses
      spouses = @person.current_spouses
      if spouses.any?
        spouse_names = spouses.map(&:full_name).join(', ')
        spouse_label = spouses.count == 1 ? 'Spouse' : 'Spouses'
        relationships << "#{spouse_label}: #{spouse_names}"
      end
      
      # Children with gender-specific labels
      children = @person.children
      if children.any?
        if children.count <= 3
          # Show individual children with gender-specific labels
          children.each do |child|
            child_type = get_child_relationship_type(child)
            relationships << "#{child_type}: #{child.full_name}"
          end
        else
          # Show summary for many children
          children_text = "Children: #{children.limit(2).map(&:full_name).join(', ')} +#{children.count - 2} more"
          relationships << children_text
        end
      end
      
      # Siblings
      siblings = @person.siblings
      if siblings.any? && relationships.count < 5  # Only add if we have space
        if siblings.count <= 2
          siblings.each do |sibling|
            sibling_type = get_sibling_relationship_type(sibling)
            relationships << "#{sibling_type}: #{sibling.full_name}"
          end
        else
          sibling_text = "Siblings: #{siblings.limit(2).map(&:full_name).join(', ')} +#{siblings.count - 2} more"
          relationships << sibling_text
        end
      end
      
      relationships
    end
    
    def get_child_relationship_type(child)
      return 'Child' unless child.gender.present?
      child.gender.downcase == 'male' ? 'Son' : 'Daughter'
    end
    
    def get_sibling_relationship_type(sibling)
      return 'Sibling' unless sibling.gender.present?
      sibling.gender.downcase == 'male' ? 'Brother' : 'Sister'
    end
    
    def get_timeline_events
      events = []
      
      # Prioritize actual timeline items from database
      if @person.timeline_items.any?
        @person.timeline_items.order(:date).limit(5).each do |item|
          year_prefix = item.date ? "#{item.date.year}: " : ""
          location_suffix = item.place.present? ? " (#{item.place})" : ""
          event_text = "#{year_prefix}#{item.title}#{location_suffix}"
          events << event_text
        end
      end
      
      # Add facts as timeline events if we have space
      if events.length < 5 && @person.facts.any?
        remaining_slots = 5 - events.length
        @person.facts.order(:date).limit(remaining_slots).each do |fact|
          date_prefix = fact.date ? "#{fact.date.year}: " : ""
          location_suffix = fact.location.present? ? " (#{fact.location})" : ""
          
          if fact.label.present? && fact.value.present?
            event_text = "#{date_prefix}#{fact.label}: #{fact.value}#{location_suffix}"
          elsif fact.label.present?
            event_text = "#{date_prefix}#{fact.label}#{location_suffix}"
          elsif fact.value.present?
            event_text = "#{date_prefix}#{fact.value}#{location_suffix}"
          else
            next # Skip empty facts
          end
          
          events << event_text
        end
      end
      
      events
    end
    
    def add_content_to_vips_image(image)
      # Override base method to add attractive and robust profile content
      begin
        require 'vips'
        
        Rails.logger.info "Creating enhanced profile card for #{@person.full_name}"
        
        # Add person's name prominently at the top
        name_text = Vips::Image.text @person.full_name, font: 'sans bold 40'
        image = image.composite name_text, 'over', x: 100, y: 100
        Rails.logger.info "Added name: #{@person.full_name}"
        
        # Add life information
        y_position = 170
        
        if @person.date_of_birth
          birth_year = @person.date_of_birth.year
          if @person.date_of_death
            life_span = "#{birth_year} - #{@person.date_of_death.year}"
          else
            current_age = Date.current.year - birth_year
            life_span = "Born #{birth_year} • Age #{current_age}"
          end
          
          life_text = Vips::Image.text life_span, font: 'sans 24'
          image = image.composite life_text, 'over', x: 100, y: y_position
          y_position += 60
          Rails.logger.info "Added life span: #{life_span}"
        end
        
        # Add Family section title
        family_title = Vips::Image.text "Family Connections", font: 'sans bold 28'
        image = image.composite family_title, 'over', x: 100, y: y_position
        y_position += 50
        
        # Add comprehensive family information
        family_info = build_comprehensive_family_info
        family_info.each do |info_line|
          family_text = Vips::Image.text info_line, font: 'sans 20'
          image = image.composite family_text, 'over', x: 120, y: y_position
          y_position += 35
          Rails.logger.info "Added family info: #{info_line}"
        end
        
        # Add footer with branding
        footer_text = "Generated by ChronicleTree • #{Date.current.strftime('%B %Y')}"
        footer_display = Vips::Image.text footer_text, font: 'sans 16'
        image = image.composite footer_display, 'over', x: 100, y: CANVAS_HEIGHT - 80
        
        Rails.logger.info "Enhanced profile card completed successfully"
        image
      rescue => e
        Rails.logger.error "Enhanced profile generation failed: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        # Fall back to base implementation
        super(image)
      end
    end
    
    def build_comprehensive_family_info
      info_lines = []
      
      # Parents
      parents = @person.parents
      if parents.any?
        parents_names = parents.map(&:full_name).join(', ')
        info_lines << "Parents: #{parents_names}"
      end
      
      # Spouses
      spouses = @person.current_spouses
      if spouses.any?
        spouse_names = spouses.map(&:full_name).join(', ')
        info_lines << "Spouse: #{spouse_names}"
      end
      
      # Children
      children = @person.children
      if children.any?
        if children.count > 5
          children_text = "#{children.limit(5).map(&:full_name).join(', ')} and #{children.count - 5} more"
        else
          children_text = children.map(&:full_name).join(', ')
        end
        info_lines << "Children: #{children_text}"
      end
      
      # Siblings
      siblings = @person.siblings
      if siblings.any?
        if siblings.count > 4
          siblings_text = "#{siblings.limit(4).map(&:full_name).join(', ')} and #{siblings.count - 4} more"
        else
          siblings_text = siblings.map(&:full_name).join(', ')
        end
        info_lines << "Siblings: #{siblings_text}"
      end
      
      # Add summary stats
      total_relatives = (parents.count + spouses.count + children.count + siblings.count)
      if total_relatives > 0
        info_lines << ""  # Empty line for spacing
        info_lines << "Total family connections: #{total_relatives}"
        
        # Living vs deceased
        all_relatives = parents + spouses + children + siblings
        living_count = all_relatives.count { |p| p.date_of_death.nil? }
        info_lines << "Living relatives: #{living_count}"
      end
      
      info_lines
    end
    
    def add_main_card_background(image)
      # Add a white card with rounded corners effect and subtle shadow
      card_margin = 60
      card_width = CANVAS_WIDTH - (card_margin * 2)
      card_height = CANVAS_HEIGHT - (card_margin * 2)
      
      # Create main white card
      white_card = Vips::Image.new_from_array [[255, 255, 255]]
      white_card = white_card.embed 0, 0, card_width, card_height, extend: :copy
      
      # Composite the card onto the background
      image = image.composite white_card, 'over', x: card_margin, y: card_margin
      
      image
    end
    
    def add_profile_header(image)
      # Add colorful header section with person's main info
      header_height = 150
      
      # Create header background with blue gradient
      header_bg = Vips::Image.new_from_array [[59, 130, 246]] # Blue
      header_bg = header_bg.embed 0, 0, CANVAS_WIDTH - 120, header_height, extend: :copy
      
      # Add header background
      image = image.composite header_bg, 'over', x: 60, y: 60
      
      # Add person's name in white text
      name_text = Vips::Image.text @person.full_name, 
                                  font: 'sans bold 36',
                                  rgba: true,
                                  align: :centre
      # Make text white by creating a white version
      white_name = create_white_text(@person.full_name, 'sans bold 36')
      image = image.composite white_name, 'over', x: 100, y: 90
      
      # Add life dates in header
      if @person.date_of_birth
        birth_year = @person.date_of_birth.year
        age_text = @person.date_of_death ? 
          "#{birth_year} - #{@person.date_of_death.year}" : 
          "Born #{birth_year} • Age #{Date.current.year - birth_year}"
        
        white_dates = create_white_text(age_text, 'sans 20')
        image = image.composite white_dates, 'over', x: 100, y: 140
      end
      
      image
    end
    
    def add_family_sections(image)
      y_start = 250
      section_spacing = 45
      current_y = y_start
      
      # Family Connections Title with blue color
      blue_title = create_colored_text('Family Connections', 'sans bold 24', [59, 130, 246])
      image = image.composite blue_title, 'over', x: 100, y: current_y
      current_y += 50
      
      # Parents section
      parents = @person.parents
      if parents.any?
        # Section icon and title
        parents_title = create_colored_text('👨‍👩‍👧‍👦 Parents', 'sans bold 18', [107, 114, 128])
        image = image.composite parents_title, 'over', x: 120, y: current_y
        current_y += 30
        
        # Parents list
        parents_text = parents.map(&:full_name).join(', ')
        parents_content = create_colored_text(parents_text, 'sans 16', [75, 85, 99])
        image = image.composite parents_content, 'over', x: 140, y: current_y
        current_y += section_spacing
      end
      
      # Spouse section
      spouses = @person.current_spouses
      if spouses.any?
        spouse_title = create_colored_text('💑 Spouse', 'sans bold 18', [107, 114, 128])
        image = image.composite spouse_title, 'over', x: 120, y: current_y
        current_y += 30
        
        spouse_text = spouses.map(&:full_name).join(', ')
        spouse_content = create_colored_text(spouse_text, 'sans 16', [75, 85, 99])
        image = image.composite spouse_content, 'over', x: 140, y: current_y
        current_y += section_spacing
      end
      
      # Children section
      children = @person.children
      if children.any?
        children_title = create_colored_text('👶 Children', 'sans bold 18', [107, 114, 128])
        image = image.composite children_title, 'over', x: 120, y: current_y
        current_y += 30
        
        children_text = children.count > 4 ? 
          "#{children.limit(4).map(&:full_name).join(', ')} +#{children.count - 4} more" :
          children.map(&:full_name).join(', ')
        children_content = create_colored_text(children_text, 'sans 16', [75, 85, 99])
        image = image.composite children_content, 'over', x: 140, y: current_y
        current_y += section_spacing
      end
      
      # Siblings section
      siblings = @person.siblings
      if siblings.any?
        siblings_title = create_colored_text('👫 Siblings', 'sans bold 18', [107, 114, 128])
        image = image.composite siblings_title, 'over', x: 120, y: current_y
        current_y += 30
        
        siblings_text = siblings.count > 3 ? 
          "#{siblings.limit(3).map(&:full_name).join(', ')} +#{siblings.count - 3} more" :
          siblings.map(&:full_name).join(', ')
        siblings_content = create_colored_text(siblings_text, 'sans 16', [75, 85, 99])
        image = image.composite siblings_content, 'over', x: 140, y: current_y
      end
      
      image
    end
    
    def add_styled_footer(image)
      # Add attractive footer with branding
      footer_y = CANVAS_HEIGHT - 60
      
      # Create footer background
      footer_bg = Vips::Image.new_from_array [[249, 250, 251]] # Very light gray
      footer_bg = footer_bg.embed 0, 0, CANVAS_WIDTH - 120, 40, extend: :copy
      image = image.composite footer_bg, 'over', x: 60, y: footer_y - 10
      
      # Footer text with brand color
      footer_text = "🌳 Generated by ChronicleTree • #{Date.current.strftime('%B %Y')}"
      footer_styled = create_colored_text(footer_text, 'sans 14', [107, 114, 128])
      image = image.composite footer_styled, 'over', x: 100, y: footer_y
      
      image
    end
    
    def create_white_text(text, font)
      # Create white text by manipulating the text image
      begin
        text_img = Vips::Image.text text, font: font, rgba: true
        # Convert to white by inverting and adjusting
        text_img = text_img.invert.extract_band(0, n: 3)
        white_bg = Vips::Image.new_from_array [[255, 255, 255]]
        white_bg = white_bg.embed 0, 0, text_img.width, text_img.height, extend: :copy
        white_bg
      rescue => e
        Rails.logger.warn "White text creation failed: #{e.message}"
        # Fallback to regular text
        Vips::Image.text text, font: font
      end
    end
    
    def create_colored_text(text, font, color_rgb)
      # Create colored text (simplified approach)
      begin
        Vips::Image.text text, font: font
      rescue => e
        Rails.logger.warn "Colored text creation failed: #{e.message}"
        Vips::Image.text text, font: 'sans 14'
      end
    end
    
    def escape_xml(text)
      text.to_s.gsub('&', '&amp;').gsub('<', '&lt;').gsub('>', '&gt;').gsub('"', '&quot;').gsub("'", '&apos;')
    end
    
    def add_main_card(person)
      # Main white card background
      card_margin = 80
      card_width = CANVAS_WIDTH - (card_margin * 2)
      card_height = CANVAS_HEIGHT - (card_margin * 2)
      
      add_rounded_rectangle(
        card_margin, 
        card_margin, 
        card_width, 
        card_height,
        {
          radius: 20,
          color: COLORS[:card_bg],
          border_color: COLORS[:accent],
          border_width: 2
        }
      )
    end
    
    def add_person_header(person)
      header_y = 120
      
      # Profile photo (if available)
      photo_path = get_profile_photo_path(person)
      if photo_path
        add_profile_photo(photo_path, 120, header_y, 120)
      else
        add_placeholder_avatar(120, header_y, 120)
      end
      
      # Name and basic info
      name_x = 270
      add_text(person.full_name, name_x, header_y, {
        size: 36,
        weight: 'bold',
        color: COLORS[:text_primary],
        max_width: 50
      })
      
      # Life dates
      dates = format_life_dates(person)
      if dates.present?
        add_text(dates, name_x, header_y + 50, {
          size: 20,
          color: COLORS[:text_secondary]
        })
      end
      
      # Gender indicator (optional)
      if person.gender.present?
        gender_icon = person.gender.downcase == 'female' ? '♀' : '♂'
        add_text("#{gender_icon} #{person.gender}", name_x, header_y + 80, {
          size: 16,
          color: COLORS[:accent]
        })
      end
    end
    
    def add_person_details(person)
      details_y = 280
      left_margin = 120
      
      # Birth place (disabled - field doesn't exist in Person model)
      # if person.respond_to?(:birth_place) && person.birth_place.present?
      #   add_text("📍 Born in #{person.birth_place}", left_margin, details_y, {
      #     size: 18,
      #     color: COLORS[:text_primary]
      #   })
      #   details_y += 35
      # end
      
      # Key facts (limit to 3 most important)
      facts = get_key_facts(person).limit(3)
      facts.each do |fact|
        if fact.label.present? && fact.value.present?
          fact_text = "• #{fact.label}: #{fact.value}"
        elsif fact.label.present?
          fact_text = "• #{fact.label}"
        elsif fact.value.present?
          fact_text = "• #{fact.value}"
        else
          next # Skip empty facts
        end
        
        add_text(fact_text, left_margin, details_y, {
          size: 16,
          color: COLORS[:text_primary],
          max_width: 80
        })
        details_y += 30
      end
      
      # Add some spacing if no facts
      details_y += 20 if facts.empty?
      
      # Timeline highlights (if available)
      timeline_items = get_timeline_highlights(person).limit(2)
      timeline_items.each do |item|
        year = item.date&.year || item.year || 'Unknown'
        timeline_text = "#{year}: #{item.title}"
        
        add_text(timeline_text, left_margin, details_y, {
          size: 16,
          color: COLORS[:text_secondary],
          max_width: 80
        })
        details_y += 30
      end
    end
    
    def add_relationships_summary(person)
      summary_y = 450
      left_margin = 120
      right_margin = CANVAS_WIDTH - 120
      
      # Create relationship summary boxes
      relationships = gather_relationship_stats(person)
      
      if relationships.any?
        add_text("Family Connections:", left_margin, summary_y, {
          size: 20,
          weight: 'bold',
          color: COLORS[:primary]
        })
        summary_y += 35
        
        # Display relationship counts in a grid
        col_width = 200
        relationships.each_with_index do |rel, index|
          x = left_margin + (index % 3) * col_width
          y = summary_y + (index / 3) * 35
          
          add_text("#{rel[:icon]} #{rel[:count]} #{rel[:label]}", x, y, {
            size: 16,
            color: COLORS[:text_primary]
          })
        end
      end
    end
    
    def add_footer
      footer_y = CANVAS_HEIGHT - 60
      
      # App branding
      add_text("Generated by ChronicleTree", 120, footer_y, {
        size: 14,
        color: COLORS[:text_secondary]
      })
      
      # Date generated
      date_text = Date.current.strftime("%B %Y")
      add_text(date_text, CANVAS_WIDTH - 200, footer_y, {
        size: 14,
        color: COLORS[:text_secondary]
      })
    end
    
    def get_profile_photo_path(person)
      # Try to get the profile photo from the person's profile
      return nil unless person.profile&.avatar&.attached?
      
      begin
        # For Active Storage, we need to get the actual file path
        # This is a simplified approach - in production you might want to handle this differently
        blob = person.profile.avatar.blob
        if blob.service.respond_to?(:path_for)
          blob.service.path_for(blob.key)
        else
          # Fallback: download the file temporarily
          tempfile = Tempfile.new(['avatar', blob.filename.extension_with_delimiter])
          tempfile.binmode
          blob.download { |chunk| tempfile.write(chunk) }
          tempfile.close
          tempfile.path
        end
      rescue => e
        Rails.logger.warn "Could not access profile photo: #{e.message}"
        nil
      end
    end
    
    def format_life_dates(person)
      birth_year = person.date_of_birth&.year || person.birth_year
      death_year = person.date_of_death&.year || person.death_year
      
      return nil unless birth_year
      
      if death_year
        "#{birth_year} - #{death_year}"
      else
        "Born #{birth_year}"
      end
    end
    
    def get_key_facts(person)
      person.facts.order(:created_at)
    end
    
    def get_timeline_highlights(person)
      person.timeline_items.order(:date, :created_at)
    end
    
    def gather_relationship_stats(person)
      stats = []
      
      # Count current spouses
      current_spouses = count_current_spouses(person)
      if current_spouses > 0
        stats << {
          icon: '💑',
          count: current_spouses,
          label: current_spouses == 1 ? 'spouse' : 'spouses'
        }
      end
      
      # Count children
      children = count_children(person)
      if children > 0
        stats << {
          icon: '👶',
          count: children,
          label: children == 1 ? 'child' : 'children'
        }
      end
      
      # Count parents
      parents = count_parents(person)
      if parents > 0
        stats << {
          icon: '👨‍👩‍👦',
          count: parents,
          label: parents == 1 ? 'parent' : 'parents'
        }
      end
      
      # Count siblings
      siblings = count_siblings(person)
      if siblings > 0
        stats << {
          icon: '👫',
          count: siblings,
          label: siblings == 1 ? 'sibling' : 'siblings'
        }
      end
      
      stats
    end
    
    def count_current_spouses(person)
      person.relationships
            .where(relationship_type: 'spouse')
            .where.not(is_ex: true)
            .count
    end
    
    def count_children(person)
      person.relationships
            .where(relationship_type: 'child')
            .count
    end
    
    def count_parents(person)
      person.related_by_relationships
            .where(relationship_type: 'child')
            .count
    end
    
    def count_siblings(person)
      person.relationships
            .where(relationship_type: 'sibling')
            .count
    end
  end
end